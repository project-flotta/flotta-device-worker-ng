// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Retry retry
//
// swagger:model retry
type Retry struct {

	// type of the retry function
	// Enum: [constantBackoff exponentialBackoff]
	Backoff string `json:"backoff,omitempty"`

	// initial interval in seconds for exponential backoff
	InitialIntervalSeconds int32 `json:"initialIntervalSeconds,omitempty"`

	// multiplier
	Multiplier int32 `json:"multiplier,omitempty"`

	// constant interval period in seconds
	PeriodSeconds int32 `json:"periodSeconds,omitempty"`

	// randomization factor for exponential backoff
	RandomizationFactor float64 `json:"randomizationFactor,omitempty"`
}

// Validate validates this retry
func (m *Retry) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBackoff(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var retryTypeBackoffPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["constantBackoff","exponentialBackoff"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		retryTypeBackoffPropEnum = append(retryTypeBackoffPropEnum, v)
	}
}

const (

	// RetryBackoffConstantBackoff captures enum value "constantBackoff"
	RetryBackoffConstantBackoff string = "constantBackoff"

	// RetryBackoffExponentialBackoff captures enum value "exponentialBackoff"
	RetryBackoffExponentialBackoff string = "exponentialBackoff"
)

// prop value enum
func (m *Retry) validateBackoffEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, retryTypeBackoffPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Retry) validateBackoff(formats strfmt.Registry) error {
	if swag.IsZero(m.Backoff) { // not required
		return nil
	}

	// value enum
	if err := m.validateBackoffEnum("backoff", "body", m.Backoff); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this retry based on context it is used
func (m *Retry) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *Retry) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Retry) UnmarshalBinary(b []byte) error {
	var res Retry
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
